!function (e) {
    "function" == typeof define && define.amd ? define(e) : e()
}(function () {
    "use strict";

    function r(e, t) {
        for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r)
        }
    }

    function f(e, t, n) {
        return t in e ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = n, e
    }

    var m = {recordable: !0, sampleRate: 16e3, sampleBits: 16, bufferSize: 16384}, h = 0, o = 1, c = 0, u = 1, l = 2,
        e = function () {
            function d() {
                var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : m, t = e.recordable,
                    n = void 0 === t ? m.recordable : t, r = e.bufferSize, a = void 0 === r ? m.bufferSize : r,
                    i = e.sampleRate, o = void 0 === i ? m.sampleRate : i, s = e.sampleBits,
                    c = void 0 === s ? m.sampleBits : s;
                !function (e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                }(this, d), f(this, "state", h), f(this, "ctx", new (window.AudioContext || window.webkitAudioContext)), f(this, "sampleRate", m.sampleRate), f(this, "sampleBits", m.sampleBits), f(this, "recordable", m.recordable), f(this, "recorder", null), f(this, "source", null), f(this, "stream", null), f(this, "buffer", []), f(this, "bufferSize", 0);
                var u = this.ctx, l = u.createScriptProcessor || u.createJavaScriptNode;
                this.recorder = l.call(u, a, 1, 1), this.recordable = n, this.sampleRate = o, this.sampleBits = c
            }

            var e, t, n;
            return e = d, (t = [{
                key: "start", value: function (a) {
                    var i = this;
                    return this.ctx.resume(), new Promise(function (r, t) {
                        navigator.mediaDevices.getUserMedia({audio: !0}).then(function (e) {
                            var t = i.recorder, n = i.ctx.createMediaStreamSource(e);
                            i.stream = e, i.source = n, t.onaudioprocess = function (e) {
                                var t = e.inputBuffer.getChannelData(0);
                                i.recordable && (i.buffer.push(t.slice(0)), i.bufferSize += t.length), "function" == typeof a && a(t)
                            }, n.connect(t), t.connect(i.ctx.destination), i.state = o, r(e)
                        }).catch(function (e) {
                            t(e)
                        })
                    })
                }
            }, {
                key: "pause", value: function () {
                    this.stream.getAudioTracks()[0].stop(), this.recorder.disconnect(), this.source.disconnect(), this.ctx.suspend(), this.state = h
                }
            }, {
                key: "clear", value: function () {
                    this.buffer = [], this.bufferSize = 0
                }
            }, {
                key: "getRecord", value: function () {
                    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {
                        encodeTo: c,
                        compressible: !1
                    }, t = e.encodeTo, n = void 0 === t ? c : t, r = e.compressible, a = void 0 !== r && r;
                    if (this.recordable) {
                        var i = function (e, t) {
                                for (var n = new Float32Array(t), r = 0, a = 0; r < e.length; a += e[r].length, r += 1) n.set(e[r], a);
                                return n
                            }(this.buffer, this.bufferSize), o = this.ctx.sampleRate,
                            s = (a = a && this.sampleRate < o) ? this.sampleRate : o;
                        switch (a && (i = function (e, t, n) {
                            if (t < n) throw new Error('Invalid parameter: "inputSampleRate" must be greater than "outputSampleRate"');
                            for (var r = e.length, a = (t += 0) / (n += 0), i = Math.ceil(r * n / t), o = new Float32Array(i), s = 0, c = 0; c < i; c += 1) o[c] = e[Math.floor(s)], s += a;
                            return o
                        }(i, o, s)), n) {
                            case c:
                                return i;
                            case u:
                                return function (e, t) {
                                    if (-1 === [8, 16].indexOf(t)) throw new Error('Invalid parameter: "sampleBits" must be 8 or 16');
                                    for (var n = e.length * (t / 8), r = new ArrayBuffer(n), a = new DataView(r), i = 0, o = 0; i < e.length; i += 1, o += t / 8) {
                                        var s = Math.max(-1, Math.min(1, e[i])), c = s < 0 ? 32768 * s : 32767 * s;
                                        8 === t ? a.setInt8(o, parseInt(255 / (65535 / (c + 32768)), 10), !0) : a.setInt16(o, c, !0)
                                    }
                                    return a.buffer
                                }(i, this.sampleBits);
                            case l:
                                return function (e, t, n) {
                                    if (-1 === [8, 16].indexOf(t)) throw new Error('Invalid parameter: "sampleBits" must be 8 or 16');
                                    var r = e.length * (t / 8), a = new ArrayBuffer(44 + r), i = new DataView(a), o = 0,
                                        s = function (e) {
                                            for (var t = 0; t < e.length; t += 1) i.setUint8(o + t, e.charCodeAt(t))
                                        };
                                    s("RIFF"), o += 4, i.setUint32(o, 36 + r, !0), o += 4, s("WAVE"), o += 4, s("fmt "), o += 4, i.setUint32(o, 16, !0), o += 4, i.setUint16(o, 1, !0), o += 2, i.setUint16(o, 1, !0), o += 2, i.setUint32(o, n, !0), o += 4, i.setUint32(o, 1 * n * (t / 8), !0), o += 4, i.setUint16(o, t / 8 * 1, !0), o += 2, i.setUint16(o, t, !0), o += 2, s("data"), o += 4, i.setUint32(o, r, !0), o += 4;
                                    for (var c = 0; c < e.length; c += 1, o += t / 8) {
                                        var u = Math.max(-1, Math.min(1, e[c])), l = u < 0 ? 32768 * u : 32767 * u;
                                        8 === t ? i.setInt8(o, parseInt(255 / (65535 / (l + 32768)), 10), !0) : i.setInt16(o, l, !0)
                                    }
                                    return new Blob([i], {type: "audio/wav"})
                                }(i, this.sampleBits, s);
                            default:
                                throw new Error('Invalid parameter: "encodeTo" must be ENCODE_TYPE')
                        }
                    }
                    throw new Error('Configuration error: "recordable" must be set to true')
                }
            }]) && r(e.prototype, t), n && r(e, n), d
        }();
    void 0 !== window && void 0 !== navigator && (void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function (n) {
        var r = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        return r ? new Promise(function (e, t) {
            r.call(navigator, n, e, t)
        }) : Promise.reject(new Error("getUserMedia is not implemented in this environment"))
    }));
    var t, n = document.getElementById("btn-start"), a = document.getElementById("btn-pause"),
        i = document.getElementById("btn-clear"), s = document.getElementById("log"),
        d = document.getElementById("audio");

    function v(e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "",
            n = '<span style="margin-right:8px">\n           '.concat((new Date).toLocaleString(), ':\n         </span>\n         <span style="color:').concat(t ? "red" : "blue", '">\n           ').concat(e, " ").concat(t, "\n         </span>"),
            r = document.createElement("div");
        r.innerHTML = n, s.appendChild(r)
    }

    n.addEventListener("click", function () {
        t || (t = new e({recordable: !0, sampleRate: 16e3})), t.state === h && t.start().then(function () {
            v("start recording")
        }).catch(function (e) {
            v("Recording failed.", e)
        })
    }), a.addEventListener("click", function () {
        t && t.state === o && (t.pause(), d.src = URL.createObjectURL(t.getRecord({
            encodeTo: l,
            compressible: !0
        })
        ), v("pause recording"))
    }), i.addEventListener("click", function () {
        t.clear()
    })
});

//# sourceMappingURL=demo.min.js.map
